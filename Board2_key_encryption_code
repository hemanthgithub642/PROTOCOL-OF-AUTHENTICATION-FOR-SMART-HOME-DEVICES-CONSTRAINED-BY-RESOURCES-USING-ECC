#include <Arduino.h>
void setup() {
 Serial.begin(9600);
}
void loop() {
 while (!Serial.available()) {
 delay(10);
 }
 uint32_t receivedPKX = readSerialValue("PKX:");
 uint32_t receivedPKY = readSerialValue("PKY:");
 uint32_t receivedR = readSerialValue("R:");
 uint32_t receivedS = readSerialValue("S:");
 String message = "Hello from board 1!";
 // Verify the signature
 if (verifySignature(message, receivedPKX, receivedPKY, receivedR, receivedS)) {
 Serial.println("Signature verified successfully!");
 } else {
 
Serial.println("Signature verification failed!");
 }
 delay(1000); // Wait for a second
}
uint32_t readSerialValue(String label) {
 while (!Serial.available()) {
 delay(10);
 }
 Serial.find(label);
 return Serial.parseInt();
}
bool verifySignature(String message, uint32_t publicKeyX, uint32_t publicKeyY, uint32_t r, uint32_t s) {
 uint32_t w = modInverse(s, n);
 uint32_t u1 = (hash(message) * w) % n;
 uint32_t u2 = (r * w) % n;
 uint32_t x1, y1;
 calculatePublicKey(u1, &x1, &y1);
 uint32_t x2, y2;
 calculatePublicKey(u2, &x2, &y2);
 uint32_t x, y;
 addPoints(x1, y1, x2, y2, &x, &y);
 x = x % n;
 return x == r;
}
uint32_t modInverse(uint32_t a, uint32_t m) {
 for (uint32_t i = 1; i < m; i++) {
 if ((a * i) % m == 1) {
 return i;
 }
 }
 return 0; // Inverse doesn't exist
}
void calculatePublicKey(uint32_t privateKey, uint32_t* publicKeyX, uint32_t* publicKeyY) {
 *publicKeyX = (Gx * privateKey) % p;
 *publicKeyY = (Gy * privateKey) % p;
}
void addPoints(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t* x, uint32_t* y) {
 *x = (x1 + x2) % p;
 *y = (y1 + y2) % p;
}
uint32_t hash(String message) {
